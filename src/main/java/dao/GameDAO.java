
package dao;

import entities.Game;
import jakarta.persistence.TransactionRequiredException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Thaïs GENIN
 */
public class GameDAO {

    public void Create(Game game) {
        String sql = "INSERT INTO Game (id_game, gameName ) "
                + " VALUES (?, ?) ";
        try (Connection conn = ConnectionManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql,
                PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, game.getId());
            pstmt.setString(2, game.getGameName());

            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                //je récupère la table
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                //je me positionne sur le premier élément
                autoGeneratedKeys.first();
                //je viens lire la premiere colonne avec identifiant
                int id_game = autoGeneratedKeys.getInt(1);
                game.setId(id_game);
            }

        } catch (SQLException ex) {
            System.out.println("Erreur lors de la création: " + ex.getMessage());
        }
    }

    public Game ReadUser(int id_game) {
        Game game = null;
        String sql = "SELECT * FROM Game WHERE id_game=?";
        try (Connection conn = ConnectionManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id_game);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
//                game = new Game();
                game.setId(rs.getInt("id_game"));
                game.setGameName(rs.getString("gameName"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);

        }
        return game;
    }

    public List<Game> ReadAllGames() {
        ArrayList<Game> games = new ArrayList<>();
        Game game = null;
        String sql = "SELECT * FROM Game";
        try (Connection conn = ConnectionManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
//                Game game = new Game();
                game.setId(rs.getInt("id_game"));
                game.setGameName(rs.getString("gameName"));
                games.add(game);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de lecture de table : " + ex.getMessage());
        }
        return games;
    }

    public void Update(Game game) {
        String sql = "UPDATE Game SET gameName =  ?"
                + "WHERE id_game = ?";
        try (Connection conn = ConnectionManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, game.getGameName());
            pstmt.executeUpdate();
            System.out.println("Nom du jeux modifié");
        } catch (SQLException ex) {
            Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (java.lang.IllegalStateException | java.lang.IllegalArgumentException | TransactionRequiredException e) {
            System.err.println(e.getMessage());
        }
    }

    public void Delete(int id_game) {
        String sql = "DELETE FROM Game WHERE id_game = ?";
        try (Connection conn = ConnectionManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id_game);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de lasuppression : " + ex.getMessage());
        }
    }
}
